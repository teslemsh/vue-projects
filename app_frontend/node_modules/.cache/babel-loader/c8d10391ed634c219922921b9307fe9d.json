{"remainingRequest":"/home/teslem/Escritorio/vue_course/app_frontend/node_modules/babel-loader/lib/index.js!/home/teslem/Escritorio/vue_course/app_frontend/src/store/modules/cart.js","dependencies":[{"path":"/home/teslem/Escritorio/vue_course/app_frontend/src/store/modules/cart.js","mtime":1580681031890},{"path":"/home/teslem/Escritorio/vue_course/app_frontend/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/teslem/Escritorio/vue_course/app_frontend/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.array.find\";\nimport shop from \"@/api/shop\";\nexport default {\n  namespaced: true,\n  state: {\n    items: [],\n    checkoutStatus: null\n  },\n  getters: {\n    cartProducts: function cartProducts(state, getters, rootState, rootGetters) {\n      return state.items.map(function (cartItem) {\n        var product = rootState.products.items.find(function (product) {\n          return product.id === cartItem.id;\n        });\n        return {\n          title: product.title,\n          price: product.price,\n          quantity: cartItem.quantity\n        };\n      });\n    },\n    cartTotal: function cartTotal(state, getters) {\n      return getters.cartProducts.reduce(function (total, product) {\n        return total + product.price * product.quantity;\n      }, 0);\n    }\n  },\n  mutations: {\n    pushProductToCart: function pushProductToCart(state, productId) {\n      state.items.push({\n        id: productId,\n        quantity: 1\n      });\n    },\n    incrementItemQuantity: function incrementItemQuantity(state, cartItem) {\n      cartItem.quantity++;\n    },\n    setCheckoutStatus: function setCheckoutStatus(state, status) {\n      state.checkoutStatus = status;\n    },\n    emptyCart: function emptyCart(state) {\n      state.items = [];\n    }\n  },\n  actions: {\n    addProductToCart: function addProductToCart(_ref, product) {\n      var state = _ref.state,\n          getters = _ref.getters,\n          commit = _ref.commit,\n          rootState = _ref.rootState,\n          rootGetters = _ref.rootGetters;\n\n      if (rootGetters['products/productIsInStock'](product)) {\n        var cartItem = state.items.find(function (item) {\n          return item.id === product.id;\n        });\n\n        if (!cartItem) {\n          commit('pushProductToCart', product.id);\n        } else {\n          commit('incrementItemQuantity', cartItem);\n        }\n\n        commit('products/decrementProductInventory', product, {\n          root: true\n        });\n      }\n    },\n    checkout: function checkout(_ref2) {\n      var state = _ref2.state,\n          commit = _ref2.commit;\n      shop.buyProducts(state.items, function () {\n        commit('emptyCart');\n        commit('setCheckoutStatus', 'success');\n      }, function () {\n        commit('setCheckoutStatus', 'fail');\n      });\n    }\n  }\n};",{"version":3,"sources":["/home/teslem/Escritorio/vue_course/app_frontend/src/store/modules/cart.js"],"names":["shop","namespaced","state","items","checkoutStatus","getters","cartProducts","rootState","rootGetters","map","cartItem","product","products","find","id","title","price","quantity","cartTotal","reduce","total","mutations","pushProductToCart","productId","push","incrementItemQuantity","setCheckoutStatus","status","emptyCart","actions","addProductToCart","commit","item","root","checkout","buyProducts"],"mappings":";AAAA,OAAOA,IAAP,MAAiB,YAAjB;AAEA,eAAe;AACbC,EAAAA,UAAU,EAAE,IADC;AAGbC,EAAAA,KAAK,EAAE;AACLC,IAAAA,KAAK,EAAE,EADF;AAELC,IAAAA,cAAc,EAAE;AAFX,GAHM;AAQbC,EAAAA,OAAO,EAAE;AACPC,IAAAA,YADO,wBACOJ,KADP,EACcG,OADd,EACuBE,SADvB,EACkCC,WADlC,EAC+C;AACpD,aAAON,KAAK,CAACC,KAAN,CAAYM,GAAZ,CAAgB,UAAAC,QAAQ,EAAI;AACjC,YAAMC,OAAO,GAAGJ,SAAS,CAACK,QAAV,CAAmBT,KAAnB,CAAyBU,IAAzB,CAA8B,UAAAF,OAAO;AAAA,iBAAIA,OAAO,CAACG,EAAR,KAAeJ,QAAQ,CAACI,EAA5B;AAAA,SAArC,CAAhB;AACA,eAAO;AACLC,UAAAA,KAAK,EAAEJ,OAAO,CAACI,KADV;AAELC,UAAAA,KAAK,EAAEL,OAAO,CAACK,KAFV;AAGLC,UAAAA,QAAQ,EAAEP,QAAQ,CAACO;AAHd,SAAP;AAKD,OAPM,CAAP;AAQD,KAVM;AAYPC,IAAAA,SAZO,qBAYIhB,KAZJ,EAYWG,OAZX,EAYoB;AACzB,aAAOA,OAAO,CAACC,YAAR,CAAqBa,MAArB,CAA4B,UAACC,KAAD,EAAQT,OAAR;AAAA,eAAoBS,KAAK,GAAGT,OAAO,CAACK,KAAR,GAAgBL,OAAO,CAACM,QAApD;AAAA,OAA5B,EAA0F,CAA1F,CAAP;AACD;AAdM,GARI;AAyBbI,EAAAA,SAAS,EAAE;AACTC,IAAAA,iBADS,6BACUpB,KADV,EACiBqB,SADjB,EAC4B;AACnCrB,MAAAA,KAAK,CAACC,KAAN,CAAYqB,IAAZ,CAAiB;AACfV,QAAAA,EAAE,EAAES,SADW;AAEfN,QAAAA,QAAQ,EAAE;AAFK,OAAjB;AAID,KANQ;AAQTQ,IAAAA,qBARS,iCAQcvB,KARd,EAQqBQ,QARrB,EAQ+B;AACtCA,MAAAA,QAAQ,CAACO,QAAT;AACD,KAVQ;AAYTS,IAAAA,iBAZS,6BAYUxB,KAZV,EAYiByB,MAZjB,EAYyB;AAChCzB,MAAAA,KAAK,CAACE,cAAN,GAAuBuB,MAAvB;AACD,KAdQ;AAgBTC,IAAAA,SAhBS,qBAgBE1B,KAhBF,EAgBS;AAChBA,MAAAA,KAAK,CAACC,KAAN,GAAc,EAAd;AACD;AAlBQ,GAzBE;AA8Cb0B,EAAAA,OAAO,EAAE;AACPC,IAAAA,gBADO,kCAC4DnB,OAD5D,EACqE;AAAA,UAA1DT,KAA0D,QAA1DA,KAA0D;AAAA,UAAnDG,OAAmD,QAAnDA,OAAmD;AAAA,UAA1C0B,MAA0C,QAA1CA,MAA0C;AAAA,UAAlCxB,SAAkC,QAAlCA,SAAkC;AAAA,UAAvBC,WAAuB,QAAvBA,WAAuB;;AAC1E,UAAIA,WAAW,CAAC,2BAAD,CAAX,CAAyCG,OAAzC,CAAJ,EAAuD;AACrD,YAAMD,QAAQ,GAAGR,KAAK,CAACC,KAAN,CAAYU,IAAZ,CAAiB,UAAAmB,IAAI;AAAA,iBAAIA,IAAI,CAAClB,EAAL,KAAYH,OAAO,CAACG,EAAxB;AAAA,SAArB,CAAjB;;AACA,YAAI,CAACJ,QAAL,EAAe;AACbqB,UAAAA,MAAM,CAAC,mBAAD,EAAsBpB,OAAO,CAACG,EAA9B,CAAN;AACD,SAFD,MAEO;AACLiB,UAAAA,MAAM,CAAC,uBAAD,EAA0BrB,QAA1B,CAAN;AACD;;AACDqB,QAAAA,MAAM,CAAC,oCAAD,EAAuCpB,OAAvC,EAAgD;AAACsB,UAAAA,IAAI,EAAE;AAAP,SAAhD,CAAN;AACD;AACF,KAXM;AAaPC,IAAAA,QAbO,2BAamB;AAAA,UAAhBhC,KAAgB,SAAhBA,KAAgB;AAAA,UAAT6B,MAAS,SAATA,MAAS;AACxB/B,MAAAA,IAAI,CAACmC,WAAL,CACEjC,KAAK,CAACC,KADR,EAEE,YAAM;AACJ4B,QAAAA,MAAM,CAAC,WAAD,CAAN;AACAA,QAAAA,MAAM,CAAC,mBAAD,EAAsB,SAAtB,CAAN;AACD,OALH,EAME,YAAM;AACJA,QAAAA,MAAM,CAAC,mBAAD,EAAsB,MAAtB,CAAN;AACD,OARH;AAUD;AAxBM;AA9CI,CAAf","sourcesContent":["import shop from \"@/api/shop\";\n\nexport default {\n  namespaced: true,\n\n  state: {\n    items: [],\n    checkoutStatus: null\n  },\n\n  getters: {\n    cartProducts (state, getters, rootState, rootGetters) {\n      return state.items.map(cartItem => {\n        const product = rootState.products.items.find(product => product.id === cartItem.id)\n        return {\n          title: product.title,\n          price: product.price,\n          quantity: cartItem.quantity\n        }\n      })\n    },\n\n    cartTotal (state, getters) {\n      return getters.cartProducts.reduce((total, product) => total + product.price * product.quantity, 0)\n    },\n  },\n\n  mutations: {\n    pushProductToCart (state, productId) {\n      state.items.push({\n        id: productId,\n        quantity: 1\n      })\n    },\n\n    incrementItemQuantity (state, cartItem) {\n      cartItem.quantity++\n    },\n\n    setCheckoutStatus (state, status) {\n      state.checkoutStatus = status\n    },\n\n    emptyCart (state) {\n      state.items = []\n    }\n  },\n\n  actions: {\n    addProductToCart({state, getters, commit, rootState, rootGetters}, product) {\n      if (rootGetters['products/productIsInStock'](product)) {\n        const cartItem = state.items.find(item => item.id === product.id)\n        if (!cartItem) {\n          commit('pushProductToCart', product.id)\n        } else {\n          commit('incrementItemQuantity', cartItem)\n        }\n        commit('products/decrementProductInventory', product, {root: true})\n      }\n    },\n\n    checkout({state, commit}) {\n      shop.buyProducts(\n        state.items,\n        () => {\n          commit('emptyCart')\n          commit('setCheckoutStatus', 'success')\n        },\n        () => {\n          commit('setCheckoutStatus', 'fail')\n        }\n      )\n    }\n  }\n}\n"]}]}